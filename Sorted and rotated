class Solution {
    public boolean check(int[] nums) {
        int count = 0;
        int n = nums.length;

        for (int i = 0; i < n; i++) {
            if (nums[i] > nums[(i + 1) % n]) {
                count++;
                if (count > 1) {
                    return false;
                }
            }
        }
        return true;
    }

    public static void main(String[] args) {
        Solution sol = new Solution();

        int[] nums1 = {3, 4, 5, 1, 2}; // true â†’ rotated sorted
        int[] nums2 = {1, 2, 3, 4, 5}; // true â†’ already sorted
        int[] nums3 = {2, 1, 3, 4};    // false â†’ not rotated sorted
        int[] nums4 = {1, 1, 1};       // true â†’ duplicates, valid
        int[] nums5 = {1, 2, 3, 4, 0}; // true â†’ rotated at last

        System.out.println("Test 1: " + sol.check(nums1)); // true
        System.out.println("Test 2: " + sol.check(nums2)); // true
        System.out.println("Test 3: " + sol.check(nums3)); // false
        System.out.println("Test 4: " + sol.check(nums4)); // true
        System.out.println("Test 5: " + sol.check(nums5)); // true
    }
}

/*
ðŸ•’ Time Complexity: O(n)
   - We loop through the array once to count disorder points.

ðŸ§  Space Complexity: O(1)
   - Constant extra space used for 'count' and loop variable.
*/
