import java.util.*;

class Solution {

    // Function to find two indices whose sum = target
    public int[] twoSum(int[] nums, int target) {
        Map<Integer, Integer> map = new HashMap<>(); // Store number -> index

        for (int i = 0; i < nums.length; i++) {
            int need = target - nums[i]; // The number we need to reach target

            if (map.containsKey(need)) {
                // Found the pair
                return new int[]{map.get(need), i};
            }

            map.put(nums[i], i); // Store current number
        }

        return new int[]{-1, -1}; // If no pair found
    }

    // Main method to test the code
    public static void main(String[] args) {
        Solution sol = new Solution();

        int[] nums1 = {2, 7, 11, 15};
        int target1 = 9;
        System.out.println("Indices: " + Arrays.toString(sol.twoSum(nums1, target1))); // Output: [0, 1]

        int[] nums2 = {3, 2, 4};
        int target2 = 6;
        System.out.println("Indices: " + Arrays.toString(sol.twoSum(nums2, target2))); // Out
BOTH O(n)

